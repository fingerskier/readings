this & object


scope = lexical
context = execution
	...this is here


this = calling context
	not lexical
	not declaration
	not instantiation/reference


4 Rules
	1) The default binding is the global object
	 	catch-all when the other rules don't apply

	2) When there is a context object it becomes bound to `this`
		implicit binding can be lost
		...because references can be passed _before_ being called

	3) `this` can be explicitly bound by .call and .apply
		`this` can be hard-bound via call() and apply()

	4) `new` binding
		constructor calls
		e.g. new Number()
		- creates a brand new fn
		- new fn is prototype-linked
		- new fn becomes `this` for that fn call
		- returns the result of fn or the new object itself

	precedence
		4
		3
		2
		1

passing `null` or `undef` to call() or apply() means default binding will be used
	// spreading parameters
	foo.apply(null, [2, 3])

	// currying
	foo = (a,b)=>{}
	bar = foo.bind(null, 2)
	bar(3)

DMZ Object
	empty, non-delegated
	Î¦ = Object.create(null)


=>
	arrow functions derive `this` from the enclosing scope

Language Types
	string
	number
	boolean
	null
	undefined
	object

Complex Primitives
	function
	array

Built-in Objects
	String
	Number
	Boolean
	Object
	Function
	Array
	Date
	RegExp
	Error

Computed Property Names
	var myObject = {
		[prefix + "bar"]: "hello",
		[prefix + "baz"]: "world"
	};

Object.defineProperty(obj, property_name, {
	 value: val
	,writable: T/F
	,configurable: T/F
	,enumerable: T/F
})

Object.preventExtensions()

Object.seal() ~ Object.preventExtensions() && configurable:false

Object.freeze() ~ Object.seal() && writable:false

[[Get]]
	if found, returns a property's value
	if not, returns undef

[[Put]]


Middle-Man Properties
	var myObject = {
		get a() {
			return this._a_;
		},

		set a(val) {
			this._a_ = val * 2;
		}
	};

obj.hasOwnProperty(propName)
	this does not check the prototype chain

prop in obj
	this checks the prototype chain

Object.keys(obj) ~ returns an array of all *enumerable* keys

for (var v of Arr)

Array Iterator (built-in)
	var myArray = [ 1, 2, 3 ];
	var it = myArray[Symbol.iterator]();

	it.next(); // { value:1, done:false }
	it.next(); // { value:2, done:false }
	it.next(); // { value:3, done:false }
	it.next(); // { done:true }

Object Iterator (not built-in)
	var it = myObject[Symbol.iterator]();
	it.next(); // { value:2, done:false }
	it.next(); // { value:3, done:false }
	it.next(); // { value:undefined, done:true }

	// iterate `myObject` with `for..of`
	for (var v of myObject) {
		console.log( v );
	}

